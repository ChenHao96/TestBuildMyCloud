transport {
    # tcp udt unix-domain-socket
    type = "TCP"
    #NIO NATIVE
    server = "NIO"
    #enable heartbeat
    heartbeat = true
    # the client batch send request enable
    enableClientBatchSendRequest = true
    #thread factory for netty
    threadFactory {
        bossThreadPrefix = "NettyBoss"
        workerThreadPrefix = "NettyServerNIOWorker"
        serverExecutorThreadPrefix = "NettyServerBizHandler"
        shareBossWorker = false
        clientSelectorThreadPrefix = "NettyClientSelector"
        clientSelectorThreadSize = 1
        clientWorkerThreadPrefix = "NettyClientWorkerThread"
        # netty boss thread size,will not be used for UDT
        bossThreadSize = 1
        #auto default pin or 8
        workerThreadSize = "default"
    }
    shutdown {
        # when destroy server, wait seconds
        wait = 3
    }
    serialization = "kryo"
    compressor = "none"
}
# service configuration, only used in client side
service {
    #transaction service group mapping :::value=集群的名称 也就是启动seata的cluster的值:::
    vgroupMapping.storage-service = "default"
    #only support when registry.type=file, please don't set multiple addresses
    default.grouplist = "localhost:8091"
    #degrade, current not support
    enableDegrade = false
    #disable seata
    disableGlobalTransaction = false
}
#client transaction configuration, only used in client side
client {
    rm {
        asyncCommitBufferLimit = 10000
        lock {
            retryInterval = 10
            retryTimes = 30
            retryPolicyBranchRollbackOnConflict = true
        }
        reportRetryCount = 5
        tableMetaCheckEnable = false
        reportSuccessEnable = false
        sqlParserType = druid
    }
    tm {
        commitRetryCount = 5
        rollbackRetryCount = 5
    }
    undo {
        dataValidation = true
        logSerialization = "jackson"
        logTable = "undo_log"
    }
    log {
        exceptionRate = 100
    }
}